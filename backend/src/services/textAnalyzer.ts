// backend/src/services/textAnalyzer.ts
// üìù C√¥ng c·ª• ph√¢n t√≠ch vƒÉn b·∫£n v·ªõi t√≠ch h·ª£p t√¨m ki·∫øm web

import { ApiResponse, WebContent, SearchResult, WebAnalysisResult } from '../types/interfaces';
import { searchGoogleAPI, filterTrustedUrls } from './googleSearch';
import { fetchWebContent } from './webScraper';
import { analyzeTextWithAI, analyzeTextWithWebEvidence, analyzeWebContent } from './geminiAI';

/**
 * H√†m ph√¢n t√≠ch vƒÉn b·∫£n ch√≠nh v·ªõi t√¨m ki·∫øm web t√πy ch·ªçn
 * K·∫øt h·ª£p ph√¢n t√≠ch AI v·ªõi b·∫±ng ch·ª©ng web khi c√≥ s·∫µn
 */
export async function analyzeTextWithWebSearch(message: string): Promise<ApiResponse> {
  console.log("üìù B·∫Øt ƒë·∫ßu ph√¢n t√≠ch vƒÉn b·∫£n:", message.substring(0, 100) + "...");

  // Ki·ªÉm tra Google Search API c√≥ kh·∫£ d·ª•ng kh√¥ng
  const hasGoogleAPI = !!(process.env.GOOGLE_SEARCH_API_KEY && process.env.GOOGLE_SEARCH_ENGINE_ID);
  
  let allSearchResults: SearchResult[] = [];
  let webContents: WebContent[] = [];
  let webAnalysis: WebAnalysisResult | null = null;
  
  if (hasGoogleAPI) {
    console.log("üîç B∆∞·ªõc 1: ƒêang t√¨m ki·∫øm th√¥ng tin...");
    
    // T·∫°o c√°c truy v·∫•n t√¨m ki·∫øm d·ª±a tr√™n vƒÉn b·∫£n ƒë·∫ßu v√†o
    const searchQueries = [
      message.substring(0, 200),                    // 200 k√Ω t·ª± ƒë·∫ßu
      `"${message.substring(0, 100)}"`,            // T√¨m ki·∫øm c·ª•m t·ª´ ch√≠nh x√°c
      `${message.substring(0, 100)} fact check`,   // T√¨m ki·∫øm fact-check
      `${message.substring(0, 100)} tin t·ª©c`,      // T√¨m ki·∫øm tin t·ª©c ti·∫øng Vi·ªát
      `${message.substring(0, 100)} s·ª± th·∫≠t`       // T√¨m ki·∫øm s·ª± th·∫≠t ti·∫øng Vi·ªát
    ];

    // Th·ª±c hi·ªán t√¨m ki·∫øm v·ªõi nhi·ªÅu truy v·∫•n
    for (const query of searchQueries.slice(0, 4)) {
      try {
        const searchResults = await searchGoogleAPI(query, 8);
        allSearchResults = allSearchResults.concat(searchResults);
        await new Promise(resolve => setTimeout(resolve, 500)); // Gi·ªõi h·∫°n t·ªëc ƒë·ªô
      } catch (error) {
        console.log("‚ùå L·ªói t√¨m ki·∫øm:", (error as Error).message);
        // Ti·∫øp t·ª•c v·ªõi c√°c truy v·∫•n kh√°c ngay c·∫£ khi m·ªôt truy v·∫•n th·∫•t b·∫°i
      }
    }

    // Lo·∫°i b·ªè tr√πng l·∫∑p v√† l·ªçc URL ƒë√°ng tin c·∫≠y
    const uniqueResults = allSearchResults.filter((result, index, self) => 
      index === self.findIndex(r => r.link === result.link)
    );
    
    const trustedResults = filterTrustedUrls(uniqueResults);
    console.log(`‚úÖ T√¨m th·∫•y ${trustedResults.length} k·∫øt qu·∫£ ƒë√°ng tin c·∫≠y`);

    // B∆Ø·ªöC 2: T·∫£i n·ªôi dung t·ª´ c√°c trang web
    if (trustedResults.length > 0) {
      console.log("üåê B∆∞·ªõc 2: ƒêang t·∫£i n·ªôi dung t·ª´ c√°c trang web...");
      const maxSitesToFetch = 8;
      const fetchPromises = trustedResults.slice(0, maxSitesToFetch).map(result => 
        fetchWebContent(result.link)
      );

      webContents = await Promise.all(fetchPromises);
      const successfulFetches = webContents.filter(content => content.success);
      
      console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng ${successfulFetches.length}/${maxSitesToFetch} trang web`);

      // B∆Ø·ªöC 3: Ph√¢n t√≠ch n·ªôi dung web n·∫øu c√≥
      if (successfulFetches.length > 0) {
        console.log("üîç B∆∞·ªõc 3: Ph√¢n t√≠ch chi ti·∫øt n·ªôi dung web...");
        webAnalysis = await analyzeWebContent(message, webContents);
      }
    }
  } else {
    console.log("‚ö†Ô∏è Google Search API kh√¥ng kh·∫£ d·ª•ng - ch·ªâ s·ª≠ d·ª•ng ph√¢n t√≠ch AI");
  }

  // B∆Ø·ªöC 4: Ph√¢n t√≠ch ch√≠nh v·ªõi Gemini AI
  console.log("ü§ñ B∆∞·ªõc 4: Ph√¢n t√≠ch ch√≠nh v·ªõi Gemini AI...");
  
  let analysisResult;
  
  if (webAnalysis && webContents.filter(c => c.success).length > 0) {
    // Ph√¢n t√≠ch n√¢ng cao v·ªõi b·∫±ng ch·ª©ng web
    analysisResult = await analyzeTextWithWebEvidence(message, webContents, webAnalysis);
  } else {
    // Ph√¢n t√≠ch AI c∆° b·∫£n kh√¥ng c√≥ b·∫±ng ch·ª©ng web
    analysisResult = await analyzeTextWithAI(message);
  }

  console.log("‚úÖ Ho√†n th√†nh ph√¢n t√≠ch");

  // Chu·∫©n b·ªã ph·∫£n h·ªìi v·ªõi d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
  const responseData: ApiResponse = {
    success: true,
    analysis: analysisResult,
    originalText: message
  };

  // Th√™m th√¥ng tin web n·∫øu c√≥
  if (webContents.length > 0) {
    responseData.webContents = webContents
      .filter(content => content.success)
      .map(content => ({
        url: content.url,
        title: content.title,
        length: content.length,
        preview: content.content.substring(0, 300) + "..."
      }));
    
    responseData.statistics = {
      analysisMode: hasGoogleAPI ? "Ph√¢n T√≠ch VƒÉn B·∫£n" : "Ph√¢n T√≠ch AI C∆° B·∫£n",
      totalSitesFound: allSearchResults.length,
      sitesAnalyzed: webContents.filter(c => c.success).length,
      totalContentLength: webContents.filter(c => c.success).reduce((sum, content) => sum + content.length, 0),
      sourceDomains: [...new Set(webContents.filter(c => c.success).map(content => content.url.split('/')[2]))]
    };
  } else {
    responseData.statistics = {
      analysisMode: hasGoogleAPI ? "Ph√¢n T√≠ch AI (Kh√¥ng C√≥ K·∫øt Qu·∫£ Web)" : "Ph√¢n T√≠ch AI C∆° B·∫£n",
      note: hasGoogleAPI ? "Kh√¥ng t√¨m th·∫•y ngu·ªìn web li√™n quan" : "Google Search API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh"
    };
  }

  return responseData;
}

/**
 * Ph√¢n t√≠ch vƒÉn b·∫£n ƒë∆°n gi·∫£n kh√¥ng c√≥ t√¨m ki·∫øm web
 * S·ª≠ d·ª•ng l√†m ph∆∞∆°ng √°n d·ª± ph√≤ng khi t√¨m ki·∫øm web kh√¥ng kh·∫£ d·ª•ng
 */
export async function analyzeTextOnly(message: string): Promise<ApiResponse> {
  console.log("üìù Ph√¢n t√≠ch vƒÉn b·∫£n ƒë∆°n gi·∫£n kh√¥ng c√≥ t√¨m ki·∫øm web");
  
  const analysisResult = await analyzeTextWithAI(message);
  
  return {
    success: true,
    analysis: analysisResult,
    originalText: message,
    statistics: {
      analysisMode: "Ch·ªâ Ph√¢n T√≠ch AI C∆° B·∫£n",
      note: "Kh√¥ng th·ª±c hi·ªán t√¨m ki·∫øm web"
    }
  };
}