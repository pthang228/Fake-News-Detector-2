// backend/src/middleware/history.middleware.ts
// üìä Middleware t·ª± ƒë·ªông l∆∞u l·ªãch s·ª≠ ph√¢n t√≠ch

import { Request, Response, NextFunction } from 'express';
import historyService from '../services/history.service';
import { HistoryEntry } from '../types/interfaces';

/**
 * Middleware t·ª± ƒë·ªông l∆∞u c√°c ph√¢n t√≠ch th√†nh c√¥ng v√†o l·ªãch s·ª≠
 * √Åp d·ª•ng cho endpoint POST /api/analyze
 */
export const autoSaveHistoryMiddleware = (req: Request, res: Response, next: NextFunction) => {
  // Ch·ªâ √°p d·ª•ng cho endpoint ph√¢n t√≠ch
  if (req.method === 'POST' && req.path === '/api/analyze') {
    const originalJson = res.json;
    
    res.json = function (data: any) {
      // L∆∞u v√†o l·ªãch s·ª≠ n·∫øu ph√¢n t√≠ch th√†nh c√¥ng
      if (data.success && data.analysis) {
        try {
          const historyEntry: Omit<HistoryEntry, 'id'> = {
            text: data.originalText,
            result: data.analysis,
            sourcesAnalyzed: data.statistics?.sourcesAnalyzed || 0,
            analysisType: data.twoStepProcess ? 'Ph√¢n T√≠ch URL 2 B∆∞·ªõc' : 'Ph√¢n T√≠ch VƒÉn B·∫£n',
            timestamp: new Date().toISOString()
          };

          // Th√™m th√¥ng tin c·ª• th·ªÉ cho URL n·∫øu c√≥
          if (data.twoStepProcess) {
            historyEntry.originalUrl = data.originalUrl;
            historyEntry.identifiedTitle = data.analysis.identifiedTitle;
            historyEntry.keyTopics = data.analysis.keyTopics;
            historyEntry.twoStepProcess = true;
          }

          // L∆∞u v√†o l·ªãch s·ª≠
          historyService.addToHistory(historyEntry);

        } catch (error) {
          console.error("‚ùå L·ªói l∆∞u v√†o l·ªãch s·ª≠:", error);
          // Kh√¥ng l√†m th·∫•t b·∫°i request n·∫øu vi·ªác l∆∞u l·ªãch s·ª≠ th·∫•t b·∫°i
        }
      }
      
      // G·ªçi ph∆∞∆°ng th·ª©c json g·ªëc
      originalJson.call(this, data);
    };
  }
  
  next();
};

/**
 * Middleware log c√°c ho·∫°t ƒë·ªông l·ªãch s·ª≠
 */
export const historyLoggerMiddleware = (req: Request, res: Response, next: NextFunction) => {
  if (req.path.startsWith('/api/history')) {
    const startTime = Date.now();
    
    res.on('finish', () => {
      const duration = Date.now() - startTime;
      console.log(`üìä History API: ${req.method} ${req.path} - ${res.statusCode} (${duration}ms)`);
    });
  }
  
  next();
};

/**
 * Middleware validate ID cho c√°c endpoint history
 */
export const validateHistoryIdMiddleware = (req: Request, res: Response, next: NextFunction) => {
  if (req.params.id) {
    const itemId = parseInt(req.params.id);
    
    if (!itemId || isNaN(itemId)) {
      res.status(400).json({
        success: false,
        error: "ID kh√¥ng h·ª£p l·ªá - ph·∫£i l√† s·ªë nguy√™n"
      });
      return;
    }
    
    // G·∫Øn ID ƒë√£ validate v√†o request
    req.params.validatedId = itemId.toString();
  }
  
  next();
};

/**
 * Middleware rate limiting cho history endpoints
 */
export const historyRateLimitMiddleware = (req: Request, res: Response, next: NextFunction) => {
  // T·∫°m th·ªùi ch·ªâ log, c√≥ th·ªÉ implement rate limiting th·ª±c t·∫ø sau
  const userIP = req.ip || req.connection.remoteAddress;
  console.log(`üìä History request from: ${userIP} - ${req.method} ${req.path}`);
  
  next();
};

/**
 * Middleware x·ª≠ l√Ω l·ªói cho history endpoints
 */
export const historyErrorHandlerMiddleware = (error: any, req: Request, res: Response, next: NextFunction) => {
  console.error('‚ùå L·ªói trong history endpoint:', error);
  
  // Ch·ªâ x·ª≠ l√Ω l·ªói cho history endpoints
  if (req.path.startsWith('/api/history')) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server trong qu·∫£n l√Ω l·ªãch s·ª≠',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
    return;
  }
  
  // Chuy·ªÉn l·ªói cho middleware kh√°c
  next(error);
};