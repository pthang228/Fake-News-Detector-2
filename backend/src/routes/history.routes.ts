// backend/src/routes/history.routes.ts
// üìä Routes cho qu·∫£n l√Ω l·ªãch s·ª≠

import { Router } from 'express';
import { historyController } from '../controllers/history.controller';

const router = Router();

// üìä C√ÅC ENDPOINT QU·∫¢N L√ù L·ªäCH S·ª¨

/**
 * L·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ v·ªõi c√°c t√πy ch·ªçn filter v√† ph√¢n trang
 * GET /api/history
 * Query params:
 * - search: t√¨m ki·∫øm theo n·ªôi dung
 * - filter: l·ªçc theo lo·∫°i (all, fake, real, url, text)
 * - sortBy: s·∫Øp x·∫øp theo (timestamp, confidence, analysisType)
 * - order: th·ª© t·ª± (asc, desc)
 * - page: trang hi·ªán t·∫°i
 * - pageSize: s·ªë m·ª•c m·ªói trang
 */
router.get('/', historyController.getAllHistory.bind(historyController));

/**
 * L·∫•y th·ªëng k√™ l·ªãch s·ª≠
 * GET /api/history/stats
 */
router.get('/stats', historyController.getHistoryStatistics.bind(historyController));

/**
 * T√¨m ki·∫øm trong l·ªãch s·ª≠
 * GET /api/history/search
 * Query params:
 * - q: t·ª´ kh√≥a t√¨m ki·∫øm
 * - type: lo·∫°i ph√¢n t√≠ch (url, text)
 * - result: k·∫øt qu·∫£ (fake, real)
 */
router.get('/search', historyController.searchHistory.bind(historyController));

/**
 * Export l·ªãch s·ª≠ ra file JSON
 * GET /api/history/export
 */
router.get('/export', historyController.exportHistory.bind(historyController));

/**
 * L·∫•y m·ªôt m·ª•c l·ªãch s·ª≠ c·ª• th·ªÉ
 * GET /api/history/:id
 */
router.get('/:id', historyController.getHistoryItem.bind(historyController));

/**
 * Import l·ªãch s·ª≠ t·ª´ file JSON
 * POST /api/history/import
 * Body: { data: string } - JSON string ch·ª©a d·ªØ li·ªáu l·ªãch s·ª≠
 */
router.post('/import', historyController.importHistory.bind(historyController));

/**
 * X√≥a t·∫•t c·∫£ l·ªãch s·ª≠
 * DELETE /api/history
 */
router.delete('/', historyController.clearAllHistory.bind(historyController));

/**
 * X√≥a m·ª•c l·ªãch s·ª≠ c·ª• th·ªÉ
 * DELETE /api/history/:id
 */
router.delete('/:id', historyController.deleteHistoryItem.bind(historyController));

export default router;  